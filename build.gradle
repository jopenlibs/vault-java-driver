plugins {
    id 'java-library'
    id 'signing'
    id 'checkstyle'
    id 'maven-publish'
}


group 'io.github.jopenlibs'
archivesBaseName = 'vault-java-driver'
version '6.1.0'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('junit:junit:4.13.2')
    testImplementation('org.mockito:mockito-core:5.2.0')
    testImplementation('org.testcontainers:testcontainers:1.17.6')
    testImplementation('org.eclipse.jetty:jetty-server:11.0.14')
    testImplementation('org.slf4j:slf4j-api:2.0.5')
    testImplementation('org.bouncycastle:bcprov-jdk15on:1.70')
    testImplementation('org.bouncycastle:bcpkix-jdk15on:1.70')
    testImplementation('org.apache.commons:commons-io:1.3.2')

    testRuntimeOnly('org.slf4j:slf4j-simple:2.0.5')
}

compileJava {
    options.compilerArgs = ['--release', targetCompatibility.toString()]
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('javadocJar', Jar) {
    dependsOn tasks.named("javadoc")
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    dependsOn tasks.named("classes")
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

//
// Separate unit tests from integration tests.  See: `src/test-integration/README.md`
//
sourceSets {
    unitTests {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/test/java')
    }
    integrationTests {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/test-integration/java')
        resources.srcDirs += file('src/test-integration/resources')
    }
}

configurations {
    unitTestsImplementation.extendsFrom testImplementation
    unitTestsRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestsImplementation.extendsFrom testImplementation
    integrationTestsRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.named('test') {
    useJUnit()
    testClassesDirs = sourceSets.unitTests.output.classesDirs
    classpath = sourceSets.unitTests.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html {
            required = false
        }
        junitXml {
            required = true
        }
    }
}

def integrationTestTask = tasks.register('integrationTest', Test) {
    useJUnit()
    testClassesDirs = sourceSets.integrationTests.output.classesDirs
    classpath = sourceSets.integrationTests.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html {
            required = false
        }
        junitXml {
            required = true
        }
    }
}

//
// Deploying releases to Maven Central (or snapshots to a local Nexus repository).
//
// Snapshots are not signed... but signing the release artifact requires the following project properties:
//
// signing.keyId = <ID of the private key in your secure keyring used for signing JAR's>
// signing.password = <public key password>
// signing.secretKeyRingFile = <full path to your keyring file (i.e secring.gpg)>
//
if (!hasProperty('ossrhUsername')) {
    ext.ossrhUsername = ''
}
if (!hasProperty('ossrhPassword')) {
    ext.ossrhPassword = ''
}

artifacts {
    archives javadocJar, sourcesJar
}

java {
    withSourcesJar()
    withJavadocJar()
}

if (hasProperty("publish")) {

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = 'vault-java-driver'
                from components.java

                pom {
                    name = 'vault-java-driver'
                    packaging = 'jar'
                    description = 'Zero-dependency Java client for HashiCorp\'s Vault'
                    url = 'https://github.com/jopenlibs/vault-java-driver'

                    scm {
                        connection = 'https://github.com/jopenlibs/vault-java-driver.git'
                        developerConnection = 'https://github.com/jopenlibs/vault-java-driver.git'
                        url = 'https://github.com/jopenlibs/vault-java-driver'
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/jopenlibs/vault-java-driver/blob/master/README.md#license'
                        }
                    }

                    developers {
                        [
                                developer {
                                    id = 'steve-perkins'
                                    name = 'Steve Perkins'
                                    email = 'steve@steveperkins.com'
                                },
                                developer {
                                    id = 'steve-perkins-bc'
                                    name = 'Steve Perkins'
                                    email = 'steve.perkins@bettercloud.com'
                                },
                                developer {
                                    id = 'jarrodcodes'
                                    name = 'Jarrod Young'
                                    email = 'jarrodsy@gmail.com'
                                },
                                developer {
                                    id = 'tledkov'
                                    name = 'Taras Ledkov'
                                    email = 'tledkov@apache.org'
                                },
                                developer {
                                    id = 'henryx'
                                    name = 'Enrico Bianchi'
                                    email = 'enrico.bianchi@gmail.com'
                                }
                        ]
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username "$ossrhUsername"
                    password "$ossrhPassword"
                }
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}
